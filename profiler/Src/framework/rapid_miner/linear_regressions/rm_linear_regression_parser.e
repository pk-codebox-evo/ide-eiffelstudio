note
	description: "The class will parse the model file generated by rapid miner into a linear regression."
	author: ""
	date: "$Date$"
	revision: "$Revision$"
class
	RM_LINEAR_REGRESSION_PARSER

inherit
	RM_LINEAR_REGRESSION_PARSER_INTERFACE redefine
		parse_linear_regression
	end

create
	make

feature{NONE} -- Create

	make (a_model_file_path: STRING)
			-- `a_model_file_path' the path to the model file.
		do
			model_file_path := a_model_file_path.twin
		end

feature -- Interface

	parse_linear_regression
			-- Parses the linear regression from the file located at `model_file_path'
		local
			l_model_file: PLAIN_TEXT_FILE
		do
			create l_model_file.make_open_read (model_file_path)
			create last_linear_regression.make ("")
			if not l_model_file.is_empty then
				l_model_file.start
				-- just skip the first line, since it holds the date
				l_model_file.read_line
				-- remove the date from the beginning of the second line
				l_model_file.read_line
				parse_line(cleaned_line(l_model_file.last_string))
				from until l_model_file.end_of_file loop
					l_model_file.read_line
					parse_line(l_model_file.last_string)
				end
			end
		end

feature{RM_LINEAR_REGRESSION_PARSER_INTERFACE} -- Implementation

	parse_line (a_text: STRING)
			-- Parse a line `a_text' from a linear regression model file line. Put the
			-- parsed regressors in the `last_linear_regression'
		local
			l_value: DOUBLE
			l_regressor_name, l_string_value, l_line: STRING
			l_index: INTEGER
		do
			l_line := a_text.twin
			if not l_line.is_empty then
				if l_line.starts_with ("+") then
					l_line.keep_tail (l_line.count - 2)
				elseif l_line.starts_with ("-") then
					l_line.keep_tail (l_line.count - 2)
					l_line.prepend_character ('-')
				end
				if l_line.has ('*') then
					l_index := l_line.index_of ('*', 1)
					l_regressor_name := l_line.substring (l_index + 2, l_line.count)
					l_string_value := l_line.substring (1, l_index - 2)
					if l_string_value.is_double then
						l_value := l_string_value.to_double
						last_linear_regression.add_regressor (l_regressor_name, l_value)
					end
				else
					if l_line.is_double then
						l_value := l_line.to_double
						last_linear_regression.add_regressor (last_linear_regression.constant_regressor, l_value)
					end
				end
			end
		end

	cleaned_line (a_line: STRING): STRING
			-- Currently rapidminer prints the first line of the linear regression at the same line
			-- where it prints the date. The date is irrelevant and must be cleaned. This feature
			-- takes care of that - deleted the date in the beginning and returns the cleaned line.
		do
			-- cut the string until the second space character
			Result :=  a_line.substring (a_line.index_of (' ', 1) + 1, a_line.count)
			Result :=  Result.substring (Result.index_of (' ', 1), Result.count)
			Result.left_adjust
		end

end
