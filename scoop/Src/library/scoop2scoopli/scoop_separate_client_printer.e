indexing
	description: "Summary description for {SCOOP_SEPARATE_CLIENT_PRINTER}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	SCOOP_SEPARATE_CLIENT_PRINTER

inherit
	SCOOP_CLIENT_CONTEXT_AST_PRINTER
		redefine
			process_class_as,
			process_feature_clause_as,
			process_feature_as
		end

create
	make,
	make_with_default_context

feature {NONE} -- Initialization

	make (a_ctxt: ROUNDTRIP_CONTEXT)  is
			-- Initialize and set `context' with `a_ctxt'.
		require
			a_ctxt_not_void: a_ctxt /= Void
		do
			context := a_ctxt
		end

	make_with_default_context is
			-- Initialize and create context of type `ROUNDTRIP_STRING_LIST_CONTEXT'.
		do
			make (create {ROUNDTRIP_STRING_LIST_CONTEXT}.make)
		end

feature -- Access

	process_class is
			-- Process current class_c.
		require
			class_as_not_void: class_as /= Void
			class_c_not_void: class_c /= Void
		do
			process_class_as (class_as)
		end

feature {NONE} -- Roundtrip: process nodes

	process_class_as (l_as: CLASS_AS) is
		local
			s: STRING_AS
			l_parent_visitor: SCOOP_CLIENT_PARENT_VISITOR
			l_generics_visitor: SCOOP_GENERICS_VISITOR
		do
			context.add_string ("-- This class has been generated by SCOOP2SCOOPLI")
			context.add_string ("%N-- It implements separate clients for objects based on class " + class_as.class_name.name + "%N%N")

			-- since we produce only override classes we skip the indexing part
			-- safe_process (l_as.internal_top_indexes)
			if l_as.internal_top_indexes /= Void then
				last_index := l_as.internal_top_indexes.end_position
			end

			safe_process (l_as.frozen_keyword (match_list))
			safe_process (l_as.deferred_keyword (match_list))
			safe_process (l_as.expanded_keyword (match_list))
			safe_process (l_as.separate_keyword (match_list))
			safe_process (l_as.external_keyword (match_list))
			safe_process (l_as.class_keyword (match_list))
			safe_process (l_as.class_name)

				-- process internal generics
			if l_as.internal_generics /= Void then
				process_leading_leaves (l_as.internal_generics.index)
				create l_generics_visitor.make_with_context (context)
				l_generics_visitor.setup (l_as, match_list, true, true)
				l_generics_visitor.process_class_internal_generics (l_as.internal_generics, true, false)
				last_index := l_generics_visitor.get_last_index
--				last_index := l_as.internal_generics.end_position
			end

			safe_process (l_as.alias_keyword (match_list))
			s ?= l_as.external_class_name
			safe_process (s)
			safe_process (l_as.obsolete_keyword (match_list))
			safe_process (l_as.obsolete_message)

			if class_c.name_in_upper.is_equal ("EXCEP_CONST") then
				io.put_string ("EXCEP_CONST")
			end

				-- process parents.
			create l_parent_visitor.make_with_context (context)
			l_parent_visitor.setup (class_as, match_list, true, true)
			l_parent_visitor.process_internal_conforming_parents(l_as.internal_conforming_parents)
			l_parent_visitor.process_internal_non_conforming_parents (l_as.internal_non_conforming_parents)
--			if l_as.internal_non_conforming_parents /= Void then
--				last_index := l_as.internal_non_conforming_parents.end_position
--			elseif l_as.internal_conforming_parents /= Void then
--				last_index := l_as.internal_conforming_parents.end_position
--			end
			if l_as.conforming_parents /= Void or l_as.non_conforming_parents /= Void then
				last_index := l_parent_visitor.get_last_index
			end

			context.add_string ("%N%N")
			safe_process (l_as.creators)
			safe_process (l_as.convertors)

			safe_process (l_as.features)

--			if l_as.internal_invariant /= Void then
--				last_index := l_as.internal_invariant.invariant_keyword_index - 1
--				context.add_string ("%N%N")
--				safe_process (l_as.internal_invariant)
--			end

				-- process indexes
			-- since we produce only override classes we skip the indexing part
--			if l_as.internal_bottom_indexes /= Void then
--				last_index := l_as.internal_bottom_indexes.indexing_keyword_index - 1
--				context.add_string ("%N%N")
--				safe_process (l_as.internal_bottom_indexes)
--			end

			last_index := l_as.end_keyword.index - 1
			context.add_string ("%N%N")
			safe_process (l_as.end_keyword)
		end

	process_feature_clause_as (l_as: FEATURE_CLAUSE_AS) is
		do
			last_index := l_as.start_position
			context.add_string ("%N%N")
			safe_process (l_as.feature_keyword)
			safe_process (l_as.clients)
			safe_process (l_as.features)
		end

	process_feature_as (l_as: FEATURE_AS) is
		local
			l_feature_visitor: SCOOP_CLIENT_FEATURE_VISITOR
		do
			create l_feature_visitor.make_with_context (context)
			l_feature_visitor.setup (class_as, match_list, true, true)
			l_feature_visitor.process_feature(l_as)
			last_index := l_as.end_position
		end

invariant
	context_not_void: context /= Void

end
