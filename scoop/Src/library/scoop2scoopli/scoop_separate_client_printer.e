indexing
	description: "Summary description for {SCOOP_SEPARATE_CLIENT_PRINTER}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	SCOOP_SEPARATE_CLIENT_PRINTER

inherit
	SCOOP_CONTEXT_AST_PRINTER
		redefine
			process_class_as,
			process_feature_clause_as,
			process_feature_as
		end

create
	make,
	make_with_default_context

feature {NONE} -- Initialization

	make (a_ctxt: ROUNDTRIP_CONTEXT; a_class_list: SCOOP_SEPARATE_CLASS_LIST; a_system: SYSTEM_I)  is
			-- Initialize and set `context' with `a_ctxt'.
		require
			a_ctxt_not_void: a_ctxt /= Void
			a_class_list_not_void: a_class_list /= Void
			a_system_not_void: a_system /= Void
		do
			context := a_ctxt
			scoop_classes := a_class_list
			system := a_system
		end

	make_with_default_context(a_system: SYSTEM_I; a_class_list: SCOOP_SEPARATE_CLASS_LIST) is
			-- Initialize and create context of type `ROUNDTRIP_STRING_LIST_CONTEXT'.
		require
			a_class_list_not_void: a_class_list /= Void
		do
			make (create {ROUNDTRIP_STRING_LIST_CONTEXT}.make, a_class_list, a_system)
		end

feature -- Access

	process (a_class_c: CLASS_C) is
			-- Process 'a_class_c'.
		require
			a_class_c_not_void: a_class_c /= Void
		do
			current_class_c := a_class_c
			process_class_as (current_class_c.ast)
		end

feature -- Roundtrip: process nodes

	process_class_as (l_as: CLASS_AS) is
		local
			s: STRING_AS
			l_parent_visitor: SCOOP_CLIENT_PARENT_VISITOR
		do
			-- save class.
			current_class := l_as

			context.add_string ("-- This class has been generated by SCOOP2SCOOPLI%N")
			context.add_string ("-- It implements separate clients for objects based on class " + current_class.class_name.name + "%N%N")

			safe_process (l_as.internal_top_indexes)
			safe_process (l_as.frozen_keyword (match_list))
			safe_process (l_as.deferred_keyword (match_list))
			safe_process (l_as.expanded_keyword (match_list))
			safe_process (l_as.separate_keyword (match_list))
			safe_process (l_as.external_keyword (match_list))
			safe_process (l_as.class_keyword (match_list))
			safe_process (l_as.class_name)
			safe_process (l_as.internal_generics)
			safe_process (l_as.alias_keyword (match_list))
			s ?= l_as.external_class_name
			safe_process (s)
			safe_process (l_as.obsolete_keyword (match_list))
			safe_process (l_as.obsolete_message)

				-- process parents.
			create l_parent_visitor.make_with_system (context, scoop_classes, system)
			l_parent_visitor.setup (current_class, match_list, true, true)
			l_parent_visitor.process_internal_conforming_parents(l_as.internal_conforming_parents)
			l_parent_visitor.process_non_conforming_parents(l_as.internal_non_conforming_parents)

			safe_process (l_as.creators)
			safe_process (l_as.convertors)
			safe_process (l_as.features)
			safe_process (l_as.internal_invariant)
			safe_process (l_as.internal_bottom_indexes)
			safe_process (l_as.end_keyword)
		end

	process_feature_clause_as (l_as: FEATURE_CLAUSE_AS) is
		do
			last_index := l_as.start_position
			context.add_string ("%N%N")
			safe_process (l_as.feature_keyword)
			safe_process (l_as.clients)
			safe_process (l_as.features)
		end

	process_feature_as (l_as: FEATURE_AS) is
		local
			l_feature_visitor: SCOOP_CLIENT_FEATURE_VISITOR
		do
			create l_feature_visitor.make_with_system (context, scoop_classes, system)
			l_feature_visitor.setup (current_class, match_list, true, true)
			l_feature_visitor.process_feature(l_as)
		end

feature{NONE} -- Implementation

	scoop_classes: SCOOP_SEPARATE_CLASS_LIST
			-- contains all classes which have to be processed.

	system: SYSTEM_I
			-- Shared access to the current system

	current_class: CLASS_AS
			-- Class currently processed.

	current_class_c: CLASS_C
			-- Class currently processed.

invariant
	context_not_void: context /= Void

end
