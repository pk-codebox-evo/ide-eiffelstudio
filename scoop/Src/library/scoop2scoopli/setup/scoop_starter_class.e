indexing
	description: "Summary description for {SCOOP_STARTER_CLASS}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	SCOOP_STARTER_CLASS

feature

	create_starter_class (root_class: STRING) is
			-- Generate root class `SCOOP_STARTER'.
		do
			context := create {ROUNDTRIP_STRING_LIST_CONTEXT}.make
			context.add_string ("-- This class has been generated by SCOOP2SCOOPLI")

			-- add class name
			context.add_string ("%N%Nclass SCOOP_STARTER%N")

			-- add parents
			context.add_string ("inherit%N%TSCOOP_STARTER_IMP%N%T%Tredefine%N%T%T%Troot_object, execute%N%T%Tend%N")

			-- add creation clause
			context.add_string ("create%N%Tmake%N")

			-- add features clause
			context.add_string ("feature -- Implementation%N")

			-- add feature
			context.add_string ("%Texecute (a_root_object: like root_object) is")

			-- add comment
			context.add_string ("%N%T%T-- Call root creation procedure.")

			-- add do keyword
			context.add_string ("%N%T%Tdo")

			-- add output: new line
			context.add_string ("%T%T%Tio.put_string (%"%%N%")")

			-- add a call
			context.add_string ("%T%T%Ta_root_object." + a_universe.root_creation.name + "_scoop_separate_" +
								root_class.as_lower + " (Current)%N%T%Tend%N")

			-- add root_object attribute
			context.add_string ("%Troot_object: SCOOP_SEPARATE__" + root_class.as_upper)

			-- add class end keyword
			context.add_string ("end")
		end

	get_context: STRING is
			-- Get `context'.
		do
			Result := context.string_representation
		end

feature{NONE} -- Context handling

	context: ROUNDTRIP_CONTEXT
			-- Context used to store generated code

end
