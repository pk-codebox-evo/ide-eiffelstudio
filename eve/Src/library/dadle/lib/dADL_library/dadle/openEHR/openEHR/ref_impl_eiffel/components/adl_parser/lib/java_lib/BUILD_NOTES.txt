
DEVELOPER NOTES
===============

	- Thomas Beale

Overview
--------
The design details of java wrapping eiffel are described in the files in the
 ../../Documentation directory. 


Details
-------
If changes are made in the Eiffel interface, the following steps are required:

In Eiffel:
	- study the current state of ADL_INTERFACE, and the classes such as
	  ARCHETYPE, ARCHETYPE_ONTOLOGY and so on.

	- make appopriate changes to Eiffel interface class C_ADL_INTERFACE and 
	  parents.

In Java:
	- mirror these changes in the AdlJniWrapper.java class, in the directory
		  $(OPENEHR)\ref_impl_eiffel\components\adl_parser\src\java\org\
		  openehr\archetypes\adl_jni_wrapper.

	- make sure the Java system is recompiled and the appropriate .class
	  files have been generated. This can be done in eclipse or any other
	  Java IDE.

In C:
	- do an automatic regeneration of the .h file: in the directory
	      $(OPENEHR)\ref_impl_eiffel\components\adl_parser\src\java 
	  run:
	      javah org.openehr.archetypes.adl_jni_wrapper.AdlJniWrapper
	  This will generate a new C header file called 
	  org_openehr_archetypes_adl_jni_wrapper_AdlJniWrapper.h in the
	  current directory. Move this file down one directory into the jni_c
	  directory. (javah is usually in the bin directory of your java
	  installation - you may have to use a full path to execute it).

	- in the jni_c directory, reflect the changes to the regenerated.h 
  	  in the .c file (be careful - the function names are tricky!)

	- in a shell window in the jni_c directory, run nmake to regenerate 
	  the .lib file, and a .def file containing the Jni-mangled function 
	  names.  The .lib file is the library containing the JNI wrappers of 
	  the functions exported by C_ADL_INTERFACE in the eiffel build area. 
	  If you don't have any grep, sed etc, you will need to make the .def 
	  by hand. It is easy to see what to do from the existing version of 
	  this file.
	  
In Eiffel:
	- run nmake in the current directory (where this file is).
	  What the make process does (these are the steps which used to be done
	  by hand):

		* In $(OPENEHR)\ref_impl_eiffel\components\adl_parser\lib\java_lib
		  do a normal do a normal Eiffel finalize either from EiffelStudio 
		  or using "nmake finalized". This will rebuild the Eiffel code, 
		  and also cause the linking of the JNI wrapper .lib file from the 
		  java area into the build dynamic library in EIFGEN/F_code.

		* go to the EIFGEN/F_code directory and modify the ADL_JAVA_LIB.def
		  file by appending the contents of the file
			$(OPENEHR)\ref_impl_eiffel\components\adl_parser\src\java\
			jni_c\adl_jni_wrapper_exports.def. 
		  If there are already JNI-mangled function names at the bottom of 
		  these file, remove them and then append). 

		  You have to do this because the Eiffel build process only knows 
		  about the C_ADL_INTERFACE functions, not about the JNI wrapping, 
		  which is in the .lib file. So it generates a microsoft .def, 
		  defining the exported functions, file corresponding to the Eiffel 
		  functions; to make it know about the JNI wrapped functions, you 
		  have to do this manual step.

		* rerun the final stage of the make in the F_code directory by 
		  getting a cmd window and typing 'finish_freezing'.

	- the resulting dll in the F_code directory can be used with Java; it
	  can be tested with the simple Java project in the java directory. This
	  DLL needs to be moved to 
		  $(OPENEHR)\ref_impl_eiffel\components\adl_parser\src\java\org\
		  openehr\archetypes\adl_jni_wrapper

 	- recompile your java system (if needed) and run the tests. Normally you 
	  will need to add test code corresponding to the changes you have made
	  in the process documented here.

