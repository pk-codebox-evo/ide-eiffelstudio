indexing
	description	: "the dancing queen"
	legal: "See notice at end of class."
	status: "See notice at end of class."
	date: "$Date$"
	revision	: "$Revision$"

class
	BALLET

inherit
	KL_SHARED_STANDARD_FILES
		export
			{NONE} all
		end

	SHARED_BPL_ENVIRONMENT

	PLATFORM

	SHARED_SERVER

	EB_SHARED_MANAGERS

	EV_SHARED_APPLICATION

create
	make

feature -- initialisaton

	make is
		do
			if is_windows then
				create {BOOGIE_WINDOWS_EXEC}verifier.make
			elseif is_unix then
				create {BOOGIE_UNIX_EXEC}verifier.make
			else
				add_error(create {BPL_ERROR}.make("unsupported system - no verifier found"))
			end
		end

feature -- File names

	inclusion_file_name: STRING is
			-- Name of the file to include for the background theory
		local
			ee: EXECUTION_ENVIRONMENT
		once
			create ee
			Result := ee.get("EIFFEL_SRC") + "/ballet/background_theory.bpl"
		end

	use_out_file: BOOLEAN is True
			-- True if outout should be sent to file, False will print onto stdout

feature -- Environment Setup

	set_class (cls: EIFFEL_CLASS_I) is
			-- Setup the class to very as `cls'.
		require
			valid_cls: cls /= Void
			compiled: cls.is_compiled
		local
			ec: EIFFEL_CLASS_C
			cc: CLASS_C
		do
			cc := cls.compiled_representation
			ec ?= cc
			if ec /= Void then
				current_class := ec
			else
				check
					cast_error: False
				end
			end
		end

feature -- Verification

	execute_verification is
			-- Run the actual Verification.
		local
			cls_ast: CLASS_AS
--			bpl_ast_printer: BPL_AST_PRINTER
			bpl_bn_printer: BPL_BN_PRINTER
			bpl_generator: BPL_GENERATOR
			ml: LEAF_AS_LIST
		do
			environment.error_log.reset
			if current_class /= Void then
				if current_class.has_ast then

					output_manager.add_string ("Ballet: generating BoogiePL%N")
					output_manager.end_processing
					window_manager.display_message ("Generating BoogiePL")
					ev_application.process_events

					verifier.reset
					environment.set_out_stream (verifier.input)

					bpl_out("// Automagically generated by Ballet%N")
					bpl_out("// bpl code to verify class " + current_class.name + "%N")
					write_background_theory
					cls_ast := current_class.ast

--					create bpl_ast_printer.make (current_class)
--					ml := match_list_server.item (current_class.class_id)
--					bpl_ast_printer.setup (current_class.ast, ml, False, False)
--					bpl_ast_printer.process_ast_node (cls_ast)

					create bpl_bn_printer.make (current_class)
					bpl_bn_printer.visit_all_features

					create bpl_generator.make (current_class)
					ml := match_list_server.item (current_class.class_id)
					bpl_generator.setup (current_class.ast, ml, False, False)
					bpl_generator.process_ast_node (cls_ast) -- print class to prove

					if not environment.error_log.has_error then
						output_manager.add_string ("Ballet: starting verifier%N")
						window_manager.display_message ("Running verifier")
						output_manager.end_processing
						ev_application.process_events
						verifier.verify
						output_manager.add_string ("Ballet: finished%N")
						if not environment.error_log.has_error then
							output_manager.add_string ("Ballet: class is correct :-)%N")
							window_manager.display_message ("Verification successful !")
						else
							output_manager.add_string ("Ballet: there were error during verification%N")
							window_manager.display_message ("Verification failed")
						end
					else
						output_manager.add_string ("Ballet: there were errors during BoogiePL generation%N")
						output_manager.add_string ("Ballet: not running verified%N")
						window_manager.display_message ("BoogiePL generation failed")
						ev_application.process_events
						verifier.verify
			  		end
			  		output_manager.end_processing
				end
			end
		end

feature{NONE} -- Implementation

	write_background_theory is
			-- Write the background theory to `a_file'.
		local
			a_bg_file: PLAIN_TEXT_FILE
		do
			create a_bg_file.make (inclusion_file_name)
			a_bg_file.open_read
			if a_bg_file.is_open_read then
				a_bg_file.read_stream (a_bg_file.count)
				bpl_out (a_bg_file.last_string)
				a_bg_file.close
			end
		end

feature {NONE} -- Implementation

	current_class: EIFFEL_CLASS_C

	verifier: BPL_VERIFIER

indexing

	copyright:	"Copyright (c) 2006, Raphael Mack"
	license:	"GPL version 2 or later"
	copying: "[
				 
				 This program is free software; you can redistribute it and/or
				 modify it under the terms of the GNU General Public License as
				 published by the Free Software Foundation; either version 2 of
				 the License, or (at your option) any later version.
				 
				 This program is distributed in the hope that it will be useful,
				 but WITHOUT ANY WARRANTY; without even the implied warranty of
				 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
				 GNU General Public License for more details.
				 
				 You should have received a copy of the GNU General Public
				 License along with this program; if not, write to the Free Software
				 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
				 MA 02110-1301  USA

				 ]"
	end

end -- class BALLET
