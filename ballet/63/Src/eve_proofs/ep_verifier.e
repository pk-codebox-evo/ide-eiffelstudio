indexing
	description: "TODO"
	date: "$Date$"
	revision: "$Revision$"

class EP_VERIFIER

inherit {NONE}

	SHARED_EP_ENVIRONMENT
		export {NONE} all end

create
	make

feature {NONE} -- Initialization

	make
			-- Initialize verifier.
		do
			create {LINKED_LIST [TUPLE [name: STRING; content: STRING]]} verification_content.make
		end

feature -- Access

	verification_content: !LIST [TUPLE [name: STRING; content: STRING]]
			-- Boogie code to verify

feature -- Element change

	add_file_content (a_file_name: !STRING)
			-- Add Boogie code file denoted by `a_file_name' to verifier.
		local
			a_file: PLAIN_TEXT_FILE
		do
			create a_file.make (a_file_name)
			a_file.open_read
			if a_file.is_open_read then
				a_file.read_stream (a_file.count)
				verification_content.extend (["File: " + a_file_name, a_file.last_string])
				a_file.close
			else
				-- TODO: Add error message
				verification_content.extend ([a_file_name, "// Error: Unable to open file " + a_file_name])
			end
		ensure
			file_content_added: verification_content.count = old verification_content.count + 1
		end

	add_string_content (a_content: !STRING; a_content_name: !STRING)
			-- Add Boogie code in `a_content' to verifier.
		do
			verification_content.extend ([a_content_name, a_content])
		ensure
			string_content_added: verification_content.count = old verification_content.count + 1
		end

	add_buffer_content (a_content: !EP_OUTPUT_BUFFER; a_content_name: !STRING)
			-- Add Boogie code in `a_content' to verifier.
		do
			verification_content.extend ([a_content_name, a_content.string])
		ensure
			string_content_added: verification_content.count = old verification_content.count + 1
		end

feature -- Basic operations

	reset
			-- Reset verifier.
		do
			verification_content.wipe_out
		end

	verify
			-- Do verification.
		do
			generate_boogie_file
			-- TODO: launch boogie on boogie_output_file_name
			--launch_boogie
			--evaluate_boogie_output
		end

feature {NONE} -- Implementation

	generate_boogie_file
			-- Generate a Boogie code file from all added content.
		local
			output_file: KL_TEXT_OUTPUT_FILE
		do
			create output_file.make (boogie_output_file_name)
			output_file.recursive_open_write
			if not output_file.is_open_write then
					-- TODO: add error
				check false end
			else
				output_file.put_string ("// Automatically generated by Eve Proofs%N%N")
				from
					verification_content.start
				until
					verification_content.after
				loop
					output_file.put_string ("// ===========================================================================%N")
					output_file.put_string ("// " + verification_content.item.name + "%N")
					output_file.put_string ("// ===========================================================================%N%N")
					output_file.put_string (verification_content.item.content)
					output_file.put_new_line
					output_file.put_new_line

					verification_content.forth
				end
				output_file.close
			end
		end

feature {NONE} -- Implementation

	boogie_output_file_name: STRING
			-- Output file name for Boogie code file
		do
				-- TODO: move to EIFGENs directory
			Result := "C:\Temp\output.bpl"
		end

end
