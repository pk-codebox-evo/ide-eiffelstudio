<?xml version="1.0"?>

<project name="hello_world" default="help">

  <description>
    description: "Eiffel Ant file for 'iteration0_example', derived from erl_g's HelloWorld example."
    system: "iteration0_example"
    copyright: "Copyright (c) 2007 Stefan Sieber and others"
    license: "Eiffel Forum License v2 (see forum.txt)"
    date: "$Date$"
    revision: "$Revision$"
  </description>

  <inherit>
    <parent location="${GOBO}/misc/eiffel.eant">
      <redefine target="init_system"/>
      <redefine target="other_install"/>
      <redefine target="other_clean"/>
    </parent>
  </inherit>


  <!-- Implementation -->

  <target name="init_system">
    <set name="system" value="iteration0_example"/>
    <set name="system_dir" value="."/>
  </target>

  <target name="other_install" depend="init">
    <description>
      Generate reflection meta-classes.
    </description>
    <set name="eiffel" value="ise"/>
    <set name="type_list" value=""/>
    <geant target="check_setup"/>
    <gexace system="ise" xace="system.xace"/>
    <geant target="patch_elks"/>
    <geant target="erl_g"/>
    <geant target="unpatch_elks"/>
  </target>

  <target name="check_setup" depend="init">
    <set name="environment_ok" value="true"/>
    <available resource="${ISE_LIBRARY}/library/base/elks/" variable="environment_ok"/>
    <available resource="${EIFFEL_SRC}/library/base/elks" if="$environment_ok=true" variable="environment_ok"/>
    <echo if="$environment_ok=false" message="problem finding the original elks library and the delivery of it. Are the variables ISE_LIBRARY and EIFFEL_SRC correctly set?"/>
    <exit if="$environment_ok=false" code="1"/>
    <available resource="${EIFFEL_SRC}/library/base/capture_replay/elks_overrides/" variable="environment_ok"/>
    <echo if="$environment_ok=false" message="could not find the folder of the modified elks classes: ${EIFFEL_SRC}/library/base/capture_replay/elks_overrides/. does 'EIFFEL_SRC'  really point to the source folder of a capture-replay branch?"/>
    <exit if="$environment_ok=false" code="1"/>
  </target>

  <target name="other_clean" depend="init">
    <description>
      Delete reflection meta-classes.
    </description>
    <delete directory="reflection_library"/>
  </target>

 <target name="patch_elks" depend="init">
   <description>
     Patch the elks library by classes modified for capture/replay
   </description>
   <!-- backup elks: -->
   <echo message="replacing classes in '${ISE_LIBRARY}/library/base/elks' by overrides from '${EIFFEL_SRC}/library/base/capture_replay/elks_overrides/'" />
   <!-- replace classes by their overrides -->
   <copy to_directory="${ISE_LIBRARY}/library/base/elks" force="true">
     <fileset include="**/*.e" filename_directory="${EIFFEL_SRC}/library/base/capture_replay/elks_overrides/" dir="${EIFFEL_SRC}/library/base/capture_replay/elks_overrides/" exclude="**/.svn/**/*"/>
   </copy>
 </target>

 <target name="unpatch_elks" depend="patch_elks">
   <description>
     Undo the patches that `patch_elks' made. (replace the elks library with the unmodified version from source)
   </description>
   <echo message="restoring delivery elks classes from '${ISE_LIBRARY}/library/base/elks' by classes from '${EIFFEL_SRC}/library/base/elks/'" />
   <copy to_directory="${ISE_LIBRARY}/library/base/elks" force="true">
     <fileset include="**/*" filename_directory="${EIFFEL_SRC}/library/base/elks/" dir="${EIFFEL_SRC}/library/base/elks/" exclude="**/.svn/**/*"/>
   </copy>
 </target>

  <target name="erl_g" depend="init">
    <description>
      Invoke the 'erl_g' tool on the current system. Make classes in
      ${type_list} creatable.
    </description>

    <set name="define" value="GOBO_EIFFEL=${eiffel}"/>
    <set name="define" value="${define} GOBO_OS=${GOBO_OS}" if="${GOBO_OS}"/>
    <set name="define" value="${define} GOBO_CC=${GOBO_CC}" if="${GOBO_CC}"/>
    <set name="define" value="${define} GOBO_XML_EXPAT=true" if="${GOBO_XML_EXPAT}"/>
    <set name="define" value="${define} GOBO_DOTNET=true" if="${GOBO_DOTNET}"/>
    <exec executable="erl_g --define=&quot;${define}&quot; ${system_dir}/system.xace ${type_list}"/>
  </target>

</project>
