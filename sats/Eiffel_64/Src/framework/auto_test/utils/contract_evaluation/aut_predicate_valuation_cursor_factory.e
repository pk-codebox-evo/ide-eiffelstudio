note
	description: "Summary description for {AUT_PREDICATE_VALUATION_CURSOR_FACTORY}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	AUT_PREDICATE_VALUATION_CURSOR_FACTORY

inherit
	AUT_PREDICATE_VALUATION_VISITOR

feature -- Access

	last_cursor: detachable AUT_PREDICATE_VALUATION_CURSOR
			-- Last cursor generated by `generate_cursor'

feature -- Basic operation

	generate_cursor (a_valuation: AUT_PREDICATE_VALUATION; a_constraint: like constraint; a_partial_candidate: like partial_candidate) is
			-- Generate cursor for `a_valuation' and
			-- store generated cursor in `last_cursor'.
		require
			a_valuation_attached: a_valuation /= Void
			a_constraint_attached: a_constraint /= Void
			a_partial_candidate_attached: a_partial_candidate /= Void
			a_partial_candidate_valid: a_partial_candidate.lower = 0 and then a_partial_candidate.count = a_constraint.distinct_argument_count
			a_valuation_valid: a_constraint.has_predicate (a_valuation.predicate)
		do
			a_valuation.process (Current)
		ensure
			last_cursor_generated: last_cursor /= void
		end

feature -- Process

	process_nullary_predicate_valuation (a_valuation: AUT_NULLARY_PREDICATE_VALUATION) is
			-- Process `a_valuation'.
		do
			create {AUT_NULLARY_PREDICATE_VALUATION_CURSOR} last_cursor.make (a_valuation, constraint, partial_candidate)
		ensure then
			last_cursor_attached: last_cursor /= Void
			last_cursor_container_valid: last_cursor.container = a_valuation
			last_cursor_constraint_valid: last_cursor.constraint = constraint
		end

	process_unary_predicate_valuation (a_valuation: AUT_UNARY_PREDICATE_VALUATION) is
			-- Process `a_valuation'.
		do
			create {AUT_UNARY_PREDICATE_VALUATION_CURSOR} last_cursor.make (a_valuation, constraint, partial_candidate)
		ensure then
			last_cursor_attached: last_cursor /= Void
			last_cursor_container_valid: last_cursor.container = a_valuation
			last_cursor_constraint_valid: last_cursor.constraint = constraint
		end

	process_binary_predicate_valuation (a_valuation: AUT_BINARY_PREDICATE_VALUATION) is
			-- Process `a_valuation'.
		do
			create {AUT_BINARY_PREDICATE_VALUATION_CURSOR} last_cursor.make (a_valuation, constraint, partial_candidate)
		ensure then
			last_cursor_attached: last_cursor /= Void
			last_cursor_container_valid: last_cursor.container = a_valuation
			last_cursor_constraint_valid: last_cursor.constraint = constraint
		end

	process_nnary_predicate_valuation (a_valuation: AUT_NNARY_PREDICATE_VALUATION) is
			-- Process `a_valuation'.
		do
			create {AUT_NNARY_PREDICATE_VALUATION_CURSOR} last_cursor.make (a_valuation, constraint, partial_candidate)
		ensure then
			last_cursor_attached: last_cursor /= Void
			last_cursor_container_valid: last_cursor.container = a_valuation
			last_cursor_constraint_valid: last_cursor.constraint = constraint
		end

feature{NONE} -- Implementation

	constraint: detachable AUT_PREDICATE_CONSTRAINT
			-- Predicate constraint

	partial_candidate: detachable ARRAY [detachable ITP_VARIABLE];
			-- Partial candidate

note
	copyright: "Copyright (c) 1984-2009, Eiffel Software"
	license: "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			Eiffel Software
			5949 Hollister Ave., Goleta, CA 93117 USA
			Telephone 805-685-1006, Fax 805-685-6869
			Website http://www.eiffel.com
			Customer support http://support.eiffel.com
		]"
end
