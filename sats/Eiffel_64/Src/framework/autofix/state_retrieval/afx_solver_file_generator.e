note
	description: "Summary description for {AFX_SOLVER_FILE_GENERATOR}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

deferred class
	AFX_SOLVER_FILE_GENERATOR

feature -- Access

	last_content: detachable STRING
			-- Last string generated by `generate'

feature -- Basic operations

	generate (a_formula: AFX_SOLVER_EXPR; a_theory: AFX_THEORY)
			-- Generate solver file to check `a_formula' in `a_theory'.
			-- Store result in `last_content'.
		deferred
		end

	generate_for_tautology_checking (a_expr: AFX_EXPRESSION; a_state: AFX_STATE_SKELETON)
			-- Generate file to check if `a_expr' is a tautology in the context of `a_state'.
			-- Store result in `last_content'.
		do
			generate (a_expr.as_solver_expression, a_state.theory)
		end

	generate_for_implied_checking (a_exprs1: LINEAR [AFX_EXPRESSION]; a_exprs2: LINEAR [AFX_EXPRESSION]; a_theory: AFX_THEORY)
			-- Generate file to check if `a_expr2' can be implied from `a_exprs1' in the context of `a_theory'.
			-- Store result in `last_content'.
		deferred
		end

feature -- Access

	implied_expression (a_left: AFX_SOLVER_EXPR; a_right: AFX_SOLVER_EXPR): AFX_SOLVER_EXPR
			-- Solver expression for the implication: `a_left' implies `a_right'
		deferred
		end

	connected_expression (a_exprs: LIST [AFX_SOLVER_EXPR]; a_operator: STRING): AFX_SOLVER_EXPR
			-- Solver expressions from `a_exprs', connected by `a_operator'
		deferred
		end

feature{NONE} -- Implementation

	expressions_to_solver_expressions (a_exprs: LINEAR [AFX_EXPRESSION]): LINKED_LIST [AFX_SOLVER_EXPR]
			-- Expressions to solver expressions.
		do
			create {LINKED_LIST [AFX_SOLVER_EXPR]} Result.make
			a_exprs.do_all (
				agent (a_exp: AFX_EXPRESSION; a_list: LINKED_LIST [AFX_SOLVER_EXPR])
					do
						a_list.extend (a_exp.as_solver_expression)
					end (?, Result))
		end

end
