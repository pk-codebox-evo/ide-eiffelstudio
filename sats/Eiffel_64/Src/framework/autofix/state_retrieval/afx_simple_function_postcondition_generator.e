note
	description: "Summary description for {AFX_SIMPLE_FUNCTION_POSTCONDITION_GENERATOR}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	AFX_SIMPLE_FUNCTION_POSTCONDITION_GENERATOR

inherit
	SHARED_TYPES

	SHARED_SERVER

	REFACTORING_HELPER

feature -- Access

	last_postcondition: detachable STRING
			-- Postcondition generated by the last `generate'

feature -- Generation

	generate (a_class: CLASS_C; a_feature: FEATURE_I)
			-- Generate postcondition for `a_feature'.
			-- Store result in `last_postcondition'.
		local
			l_contract_extractor: AUT_CONTRACT_EXTRACTOR
			l_done: BOOLEAN
			l_text: STRING
		do
			create last_postcondition.make (64)

				-- Only generate postcondition for functions
			l_done := a_feature.type.is_void
			if not l_done then
				fixme ("Only generate postconditions for argumentless functions. 17.11.2009 Jason")
				l_done := a_feature.argument_count /= 0
			end

				-- Only generate postcondition for function
			if not l_done then
				l_done := a_feature.is_attribute
			end
			if not l_done then
				l_done := a_feature.has_precondition
			end

				-- Only generate postcondition if `a_feature' does not have any postcondition yet.
			if not l_done then
				create l_contract_extractor
				l_done := not l_contract_extractor.postcondition_of_feature (a_feature, a_class).is_empty
			end

			if not l_done then
				if attached {BODY_AS} a_feature.body.body as l_body then
					if attached {ROUTINE_AS} l_body.content as l_routine then
						if attached {DO_AS} l_routine.routine_body as l_do then
							if l_do.compound.count = 1 then
								if attached {ASSIGN_AS} l_do.compound.first as l_assign then
									if attached {RESULT_AS} l_assign.target as l_result then
										l_text := l_assign.original_text (match_list_server.item (a_feature.written_class.class_id))

										fixme ("Does not support qualified call for the moment. 17.11.2009 Jason")
										if not l_text.has ('.') then
											l_text.replace_substring_all (":=", "= (")
											l_text.append (once ")")
											last_postcondition.append (l_text)
										end
									end
								end
							end
						end
					end
				end

			end
		end

note
	copyright: "Copyright (c) 1984-2009, Eiffel Software"
	license: "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			Eiffel Software
			5949 Hollister Ave., Goleta, CA 93117 USA
			Telephone 805-685-1006, Fax 805-685-6869
			Website http://www.eiffel.com
			Customer support http://support.eiffel.com
		]"
end
