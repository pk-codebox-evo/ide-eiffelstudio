note
	description: "Summary description for {AFX_FIX_SKELETON}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

deferred class
	AFX_FIX_SKELETON

inherit
	SHARED_SERVER

	REFACTORING_HELPER

feature -- Access

	exception_spot: AFX_EXCEPTION_SPOT
			-- Exception related information

	guard_condition: detachable AFX_EXPRESSION
			-- Expression used as guard in the generated fix.
			-- If attached, generate fix like: (p is this guard):
			--	 if p then
			--		snippet
			--   end
			--
			-- If False, generate fix like:
			--     snippet

	relevant_ast: LINKED_LIST [AFX_AST_STRUCTURE_NODE]
			-- Relevant AST nodes, that may be modified by current fix.
			-- The order of the nodes in the list is important.
			-- If the list is empty, the fix is to be generated at the end of the recipient.			
			-- Note: all the nodes in the list should also exist in `exception_spot'.`recipient_ast_structure'.

	fixes: LINKED_LIST [AFX_FIX]
			-- List of possible fixes all of which conforms to current skeleton
			-- Generated by the last `generate'.

feature -- Status report

	is_relevant_ast_valid: BOOLEAN
			-- Is `relevant_ast' valid?
		do
			Result := True
		end

	is_afore: BOOLEAN
			-- Is Current an afore fix skeleton?
		do
		end

	is_wrap: BOOLEAN
			-- Is Current a wrap fix skeleton?
		do
		end

feature -- Setting

	set_guard_condition (a_condition: like guard_condition)
			-- Set `guard_condition' with `a_condition'.
		do
			guard_condition := a_condition
		ensure
			guard_condition_set: guard_condition = a_condition
		end

feature -- Basic operations

	generate
			-- Generate fixes and store result in `fixes'.
		deferred
		end

feature{NONE} -- Implementation

	feature_body_compound_ast: EIFFEL_LIST [INSTRUCTION_AS]
			-- AST node for body of `exception_spot'.`recipient_'
			-- It is the compound part of a DO_AS.
		do
			if attached {BODY_AS} exception_spot.recipient_.body.body as l_body then
				if attached {ROUTINE_AS} l_body.content as l_routine then
					if attached {DO_AS} l_routine.routine_body as l_do then
						Result := l_do.compound
					end
				end
			end
		end

end
