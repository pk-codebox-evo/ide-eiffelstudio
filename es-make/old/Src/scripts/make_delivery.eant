<?xml version="1.0"?>

<project name="delivery" default="help">
	<description>
		description: "Builds an EiffelStudio delivery, from the current tree."
		author: "trosim, es-make Project Team, ETH Zurich"
	</description>
	<!--
		============
		== README ==
		============
		
		This script is under heavy developement.
		
		USE ON YOUR OWN RISK!
		
		start the script like this:
			cd %EIFFEL_SRC%
			geant -b make_delivery.eant
	-->

	<inherit>
		<parent location="${EIFFEL_SRC}${path_separator}scripts${path_separator}misc${path_separator}compile_executables.eant">
			<redefine target="help" />
		</parent>
	</inherit>
	
	<target name="help">
		<echo message="usage:" />
		<echo message=" geant build_delivery" />
		<echo message="     ----------" />
		<echo message=" geant finalize_executables" />
		<echo message=" geant create_delivery" />
		<echo message=" geant install_executables" />
		<echo message=" geant generate_documentation" />
		<echo message=" geant build_wizards" />
		<echo message=" geant build_vision2demo" />
		<echo message=" geant cleanup" />
		<echo message="     ----------" />
		<echo message=" geant clean" />
	</target>

	<target name="init_delivery" depend="init_system">
		<set name="ec_major_version" value="6" />
		<set name="ec_minor_version" value="0" />
		<set name="INSTALL_DIR" value="${cwd}${path_separator}Eiffel${ec_major_version}${ec_minor_version}" unless="${INSTALL_DIR}" />
		<set name="OUTPUT_DIR" value="${INSTALL_DIR}${path_separator}temporary_bin" unless="${OUTPUT_DIR}" />
		<set name="build_es_logfile" value="${cwd}${path_separator}build_es.log" unless="$build_es_logfile" />

		<available resource="${INSTALL_DIR}" variable="installdir_available" />
		<mkdir directory="${INSTALL_DIR}"  if="${installdir_available}=false" />
		<available resource="${OUTPUT_DIR}" variable="outputdir_available" />
		<mkdir directory="${OUTPUT_DIR}" if="${outputdir_available}=false" />
		<unset name="installdir_available" />
		<unset name="outputdir_available" />
	</target>

	<target name="build_delivery" depend="init_delivery">
		<set name="logmsg" value="# Building EiffelStudio delivery #" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

<!-- actually doing nothing
		<geant target="set_version"		fork="false" reuse_variables="true" />
-->
		<geant target="finalize_executables"	fork="false" reuse_variables="true" />
		<geant target="create_delivery" 	fork="false" reuse_variables="true" />
		<geant target="install_executables"	fork="false" reuse_variables="true" />
		<geant target="generate_documentation"	fork="false" reuse_variables="true" />
		<geant target="build_wizards"		fork="false" reuse_variables="true" />
		<geant target="build_vision2demo"	fork="false" reuse_variables="true" />
		<geant target="cleanup"			fork="false" reuse_variables="true" />
		
		<set name="logmsg" value="# Finished building EiffelStudio delivery #" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>

	<target name="finalize_executables" depend="init_delivery">
		<set name="logmsg" value="Finalizing executables into ${OUTPUT_DIR}" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

		<!-- run-time -->
		<set name="logmsg" value="Compile runtime ..."/>
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="compile_runtime" reuse_variables="true" />
		<set name="logmsg" value="Error occurred during 'compile_runtime' (${return_code})" unless="${return_code}=0"/>
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>

		<!-- library -->
		<set name="logmsg" value="Compile library ..." to_file="$build_es_logfile" append="true" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="compile_library" reuse_variables="true" />
		<set name="logmsg" value="Error occurred during 'compile_library' (${return_code})" unless="${return_code}=0"/>
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<available resource="${EIFFEL_SRC}${path_separator}library${path_separator}wel${path_separator}spec${path_separator}msc${path_separator}dll${path_separator}wel_hook.dll" variable="tmp_available" />
		<copy file="${EIFFEL_SRC}${path_separator}library${path_separator}wel${path_separator}spec${path_separator}msc${path_separator}dll${path_separator}wel_hook.dll" to_file="${OUTPUT_DIR}${path_separator}wel_hook.dll" if="${tmp_available}=true" />

		<!-- IL runtime -->
		<available resource="${EIFFEL_SRC}${path_separator}Eiffel${path_separator}eiffel${path_separator}com_il_generation${path_separator}Core${path_separator}run-time${path_separator}EiffelSoftware.Runtime.dll" variable="tmp_available" />
		<copy file="${EIFFEL_SRC}${path_separator}Eiffel${path_separator}eiffel${path_separator}com_il_generation${path_separator}Core${path_separator}run-time${path_separator}EiffelSoftware.Runtime.dll" to_file="${OUTPUT_DIR}${path_separator}EiffelSoftware.Runtime.dll" if="${tmp_available}=true" />
		
		<!-- ec -->
		<set name="logmsg" value="Finalize ec ..." to_file="$build_es_logfile" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_ec" />
		<set name="logmsg" value="Error occurred during 'finalize_ec' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}bench${path_separator}F_code${path_separator}ec${exe}" to_file="${OUTPUT_DIR}${path_separator}ec${exe}" if="${return_code}=0" />

		<!-- estudio -->
		<set name="logmsg" value="Finalize estudio ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_estudio" />
		<set name="logmsg" value="Error occurred during 'finalize_estudio' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}estudio${path_separator}F_code${path_separator}estudio${exe}" to_file="${OUTPUT_DIR}${path_separator}estudio${exe}" if="${return_code}=0" />

		<!-- quick_finalize -->
		<set name="logmsg" value="Finalize quick_finalize ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_quick_finalize" />
		<set name="logmsg" value="Error occurred during 'finalize_quick_finalize' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}quick_finalize${path_separator}F_code${path_separator}quick_finalize${exe}" to_file="${OUTPUT_DIR}${path_separator}quick_finalize${exe}" if="${return_code}=0" />

		<!-- esbuilder -->
		<set name="logmsg" value="Finalize esbuilder ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_esbuilder" />
		<set name="logmsg" value="Error occurred during 'finalize_esbuilder' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}esbuilder${path_separator}F_code${path_separator}esbuilder${exe}" to_file="${OUTPUT_DIR}${path_separator}esbuilder${exe}" if="${return_code}=0" />

		<!-- doc_builder -->
		<set name="logmsg" value="Finalize doc_builder ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_docbuilder" />
		<set name="logmsg" value="Error occurred during 'finalize_docbuilder' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}doc_builder${path_separator}F_code${path_separator}doc_builder${exe}" to_file="${OUTPUT_DIR}${path_separator}doc_builder${exe}" if="${return_code}=0" />

		<!-- es_cleaner -->
		<set name="logmsg" value="Finalize es_cleaner ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_es_cleaner" />
		<set name="logmsg" value="Error occurred during 'finalize_es_cleaner' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}escln_graphical${path_separator}F_code${path_separator}escln${exe}" to_file="${OUTPUT_DIR}${path_separator}escln${exe}" if="${return_code}=0" />

		<!-- compile_all -->
		<set name="logmsg" value="Finalize compile_all ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_compile_all" />
		<set name="logmsg" value="Error occurred during 'finalize_compile_all' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}compile_all${path_separator}F_code${path_separator}compile_all${exe}" to_file="${OUTPUT_DIR}${path_separator}compile_all${exe}" if="${return_code}=0" />

		<!-- specific to windows -->
		<geant target="finalize_executables_windows" fork="false" reuse_variables="true" if="${is_windows}" />

		<set name="logmsg" value="Finished finalizing executables." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>
	<target name="finalize_executables_windows" depend="init_delivery" if="${is_windows}">
		<!-- finish_freezing -->
		<set name="logmsg" value="Finalize finish_freezing ..."/>
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_finish_freezing" />
		<set name="logmsg" value="Error occurred during 'finalize_finish_freezing' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}finish_freezing${path_separator}F_code${path_separator}finish_freezing${exe}" to_file="${OUTPUT_DIR}${path_separator}finish_freezing${exe}" if="${return_code}=0" />

		<!-- h2e -->
		<set name="logmsg" value="Finalize h2e ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_h2e" />
		<set name="logmsg" value="Error occurred during 'finalize_h2e' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}h2e${path_separator}F_code${path_separator}h2e${exe}" to_file="${OUTPUT_DIR}${path_separator}h2e${exe}" if="${return_code}=0" />

		<!-- emake -->
		<set name="logmsg" value="Finalize emake ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_emake" />
		<set name="logmsg" value="Error occurred during 'finalize_emake' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}emake${path_separator}F_code${path_separator}emake${exe}" to_file="${OUTPUT_DIR}${path_separator}emake${exe}" if="${return_code}=0" />

		<!-- dotnet consumer -->
		<set name="logmsg" value="Finalize mdconsumer ..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<geant target="finalize_mdconsumer" fork="false" />
		<set name="logmsg" value="Error occurred during 'finalize_mdconsumer' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0"/>
		<copy to_directory="${OUTPUT_DIR}" dir="${compile_dir}${path_separator}EIFGENs${path_separator}consumer_20${path_separator}F_code" if="${return_code}=0">
			<fileset include="@(*.dll)" />
		</copy>
		
		<unset name="logmsg" />
	</target>

	<target name="create_delivery" depend="init_delivery">
		<set name="logmsg" value="Creating delivery structure..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

<!--
		<echo message="Clean delivery ..." to_file="$build_es_logfile" append="true" if="${installdir_available}=true" />
		<geant target="clean_delivery" reuse_variables="true" fork="false" if="${installdir_available}=true" />
		<echo message="Error occurred during 'clean_delivery' (${return_code})" unless="${return_code}=0" />
		<echo message="Error occurred during 'clean_delivery' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<exit code="${return_code}" unless="${return_code}=0" />

		<available resource="${INSTALL_DIR}" variable="installdir_available" />
-->

		<set name="return_code" value="0" />

<!-- cwd -> INSTALL_DIR
		<set name="NEW_ISE_EIFFEL" value="${cwd}" unless="${NEW_ISE_EIFFEL}" />
-->
		<set name="NEW_ISE_EIFFEL" value="${INSTALL_DIR}" unless="${NEW_ISE_EIFFEL}" />

		<!-- skeleton -->
		<set name="conf_delivery_directory" value="${EIFFEL_SRC}${path_separator}..${path_separator}Delivery" />
		<available resource="${conf_delivery_directory}" variable="delivery_dir_available" />
		<copy to_directory="${INSTALL_DIR}" dir="${conf_delivery_directory}" if="$delivery_dir_available">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>

		<!-- library -->
		<mkdir directory="library" dir="${INSTALL_DIR}" />
		<copy to_directory="${INSTALL_DIR}${path_separator}library" dir="${EIFFEL_SRC}${path_separator}library">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>

		<!-- Process Gobo -->
		<replace file="${INSTALL_DIR}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf.in" to_file="${INSTALL_DIR}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf" token="##GOBO##library" replace="library" flags="g" />
		<available resource="${GOBO}${path_separator}library" variable="gobo_available" true_value="${GOBO}" />
		<available resource="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}library" variable="gobo_available" true_value="${ISE_LIBRARY}${path_separator}library${path_separator}gobo" if="${gobo_available}=false" />
		<available resource="${ISE_EIFFEL}${path_separator}library${path_separator}gobo${path_separator}library" variable="gobo_available" true_value="${ISE_EIFFEL}${path_separator}library${path_separator}gobo" if="${gobo_available}=false" />
		<mkdir directory="${INSTALL_DIR}${path_separator}library${path_separator}gobo${path_separator}library" />
		<copy to_directory="${INSTALL_DIR}${path_separator}library${path_separator}gobo${path_separator}library" dir="${gobo_available}${path_separator}library">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>
		<unset name="gobo_available" />

		<!-- C_library -->
		<mkdir directory="C_library" dir="${INSTALL_DIR}" />
		<copy to_directory="${INSTALL_DIR}${path_separator}C_library" dir="${EIFFEL_SRC}${path_separator}C_library">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>

		<!-- headers -->
		<mkdir directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}$ISE_PLATFORM" />
		<mkdir directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}$ISE_PLATFORM${path_separator}bin" />
		<mkdir directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}$ISE_PLATFORM${path_separator}include" />
		<mkdir directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}$ISE_PLATFORM${path_separator}lib" />
		<copy to_directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}include" dir="${EIFFEL_SRC}${path_separator}C${path_separator}run-time">
			<fileset include="@(*.h)" />
		</copy>

		<!-- runtime -->
		<copy file="${EIFFEL_SRC}${path_separator}C${path_separator}eif_confmagic.h" to_file="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}include${path_separator}eif_confmagic.h" />
		<copy file="${EIFFEL_SRC}${path_separator}C${path_separator}run-time${path_separator}x2c${exe}" to_file="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin${path_separator}x2c${exe}" />
		<copy file="${EIFFEL_SRC}${path_separator}C${path_separator}ipc${path_separator}daemon${path_separator}ecdbgd${exe}" to_file="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin${path_separator}ecdbgd${exe}" />
		
<!-- do we need this?
		<copy to_directory="${INSTALL_DIR}${path_separator}precomp${path_separator}spec${path_separator}${ISE_PLATFORM}" dir="${ISE_EIFFEL}${path_separator}precomp${path_separator}spec${path_separator}platform">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>
-->

		<geant target="create_delivery_unix" reuse_variables="true" fork="false" dir="${NEW_ISE_EIFFEL}" />
		<geant target="create_delivery_windows" reuse_variables="true" fork="false" dir="${NEW_ISE_EIFFEL}" />
		
		<!-- compile NEW_ISE_EIFFEL library -->
		<set name="old_ISE_LIBRARY" value="${ISE_LIBRARY}" />
		<setenv name="ISE_LIBRARY" value="${NEW_ISE_EIFFEL}" />
		<geant target="compile_library" reuse_variables="true" />
		<set name="logmsg" value="Error occurred during 'compile_library' (${return_code})" unless="${return_code}=0" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${return_code}=0" />
		<setenv name="ISE_LIBRARY" value="${old_ISE_LIBRARY}" />
		<unset name="old_ISE_LIBRARY" />
		<set name="return_code" value="0" />

		<set name="logmsg" value="Finished creating delivery structure." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>
	<target name="create_delivery_windows" depend="init_delivery" if="${is_windows}">
		<!-- Windows -->
		<mkdir directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}lib${path_separator}${ISE_C_COMPILER}" />
		<copy to_directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}lib${path_separator}${ISE_C_COMPILER}" dir="${EIFFEL_SRC}${path_separator}C${path_separator}run-time${path_separator}LIB">
			<fileset include="@(*.lib|*.dll)" />
		</copy>
		
<!-- do we need this?				
		<copy to_directory="${INSTALL_DIR}${path_separator}studio${path_separator}config${path_separator}${ISE_PLATFORM}" dir="studio${path_separator}config${path_separator}windows" unless="${ISE_PLATFORM}=windows">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>
-->
	</target>
	<target name="create_delivery_unix" depend="init_delivery" unless="${is_windows}">
		<exec executable="chmod a+x ${INSTALL_DIR}${path_separator}make_install" accept_errors="true" />

		<copy file="${EIFFEL_SRC}${path_separator}C${path_separator}config.sh" to_directory="studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}include" />
		<copy to_directory="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}lib" dir="${EIFFEL_SRC}${path_separator}C${path_separator}run-time">
			<fileset include="@(lib*.*)" />
		</copy>
		<copy to_directory="${INSTALL_DIR}${path_separator}studio${path_separator}config${path_separator}${ISE_PLATFORM}" dir="studio${path_separator}config${path_separator}unix">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>
		<exec executable="ln -s -f ..${path_separator}..${path_separator}unix${path_separator}finish_freezing finish_freezing" dir="studio${path_separator}spec${path_separator}$ISE_PLATFORM${path_separator}bin" />
		<exec executable="ln -s -f ..${path_separator}..${path_separator}unix${path_separator}prelink prelink" dir="studio${path_separator}spec${path_separator}$ISE_PLATFORM/bin" />
	</target>

	<target name="install_executables" depend="init_delivery">
		<set name="logmsg" value="Installing executables..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

		<!-- install binaries -->
		<set name="tmp_install_dir" value="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}" />

		<available dir="${OUTPUT_DIR}" resource="ec${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="ec${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="estudio${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="estudio${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="esbuilder${exe}" variable="tmp_available" />
		<mkdir directory="${INSTALL_DIR}${path_separator}esbuilder${path_separator}spec" if="${tmp_available}=true" />
		<mkdir directory="${INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}" if="${tmp_available}=true" />
		<mkdir directory="${INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin" if="${tmp_available}=true" />
		<copy dir="${OUTPUT_DIR}" file="esbuilder${exe}" to_directory="${INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="quick_finalize${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="quick_finalize${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="escln${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="escln${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="compile_all${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="compile_all${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />

		<copy dir="${OUTPUT_DIR}" to_directory="${tmp_install_dir}${path_separator}bin">
			<fileset include="@(*.dll)" />
		</copy>

		<geant target="install_executables_windows" fork="false" reuse_variables="true" />
		<geant target="install_executables_unix" fork="false" reuse_variables="true" />

		<unset name="tmp_available" />
		<unset name="tmp_install_dir" />
		<!-- end of install -->

		<set name="logmsg" value="Finished installing executables." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>
	<target name="install_executables_unix" depend="init_delivery" unless="${is_windows}">
		<exec executable="chmod a+x ${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin${path_separator}* " accept_errors="true" exit_code_variable="return_code" />
		<exec executable="chmod a+x ${INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin${path_separator}* " accept_errors="true" exit_code_variable="return_code" />
		<exec executable="chmod a+x ${OUTPUT_DIR}${path_separator}* " accept_errors="true" exit_code_variable="return_code" />
	</target>
	<target name="install_executables_windows" depend="init_delivery" if="${is_windows}">
		<available dir="${OUTPUT_DIR}" resource="wel_hook.dll" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="wel_hook.dll" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />
		<copy dir="${OUTPUT_DIR}" file="wel_hook.dll" to_directory="${INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="EiffelSoftware.Runtime.dll" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="EiffelSoftware.Runtime.dll" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />
		<copy dir="${OUTPUT_DIR}" file="EiffelSoftware.Runtime.dll" to_directory="${tmp_install_dir}${path_separator}lib" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="finish_freezing${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="finish_freezing${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="h2e${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="h2e${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="emake${exe}" variable="tmp_available" />
		<copy dir="${OUTPUT_DIR}" file="emake${exe}" to_directory="${tmp_install_dir}${path_separator}bin" if="${tmp_available}=true" />
	</target>

	<target name="clean" depend="init_delivery">
		<exec executable="rm ${build_es_logfile}" if="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="rm ${build_es_logfile}" unless="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="rmdir /q/s ${build_es_logfile}" if="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="rm -rf ${INSTALL_DIR}" unless="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
	</target>

	<target name="cleanup" depend="init_delivery">
		<set name="logmsg" value="Cleaning up delivery..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

		<!-- remove temporary output dir -->
		<exec executable="rmdir /q/s ${OUTPUT_DIR}" if="${is_windows}" accept_errors="true" />
		<exec executable="rm -rf ${OUTPUT_DIR}" unless="${is_windows}" accept_errors="true" />

		<!-- remove unused directories -->
		<exec executable="rmdir /q/s ${INSTALL_DIR}${path_separator}scripts" if="${is_windows}" accept_errors="true" />
		<exec executable="rm -rf ${INSTALL_DIR}${path_separator}scripts" unless="${is_windows}" accept_errors="true" />

		<exec executable="rmdir /q/s ${INSTALL_DIR}${path_separator}studio${path_separator}eifinit${path_separator}spec${path_separator}unix" if="${is_windows}" accept_errors="true" />
		<exec executable="rm -rf ${INSTALL_DIR}${path_separator}studio${path_separator}eifinit${path_separator}spec${path_separator}windows" unless="${is_windows}" accept_errors="true" />

		<!-- remove on unix -->
		<exec executable="rm -rf ${INSTALL_DIR}${path_separator}wizards" unless="${is_windows}" accept_errors="true" />
		<exec executable="rm -rf ${INSTALL_DIR}${path_separator}codedom_provider" unless="${is_windows}" accept_errors="true" />

		<!-- remove on windows -->
		<exec executable="rmdir /q/s ${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}unix" if="${is_windows}" accept_errors="true" />

		<set name="logmsg" value="Finished cleaning up delivery." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>
	
	<target name="generate_documentation" depend="init_delivery">
		<set name="logmsg" value="Generating documentation..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

		<available resource="${OUTPUT_DIR}${path_separator}doc_builder${exe}" variable="tmp_docbuilder_avail" />
		<exit code="1" unless="${tmp_docbuilder_avail}" />

		<!-- create documentation -->
		<set name="conf_documentation_directory" value="${EIFFEL_SRC}${path_separator}..${path_separator}Documentation" />		
		<available resource="${conf_documentation_directory}" variable="tmp_documentation_avail" />
		<setenv name="DOCUMENT_DIR" value="${conf_documentation_directory}" if="${tmp_documentation_avail}" />
		<mkdir directory="${INSTALL_DIR}${path_separator}temporary_documentation" if="${tmp_documentation_avail}" />
		<exec executable="${OUTPUT_DIR}${path_separator}doc_builder${exe} -gen /xml2help -o /studio -t /web_simple -nohtml ${conf_documentation_directory}${path_separator}xmldoc${path_separator}projects${path_separator}documentation.dpr" if="${tmp_documentation_avail}" dir="${INSTALL_DIR}${path_separator}temporary_documentation" />
		<set name="logmsg" value="${conf_documentation_directory} isn't available! Please check it out from SVN." unless="${tmp_documentation_avail}" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" unless="${tmp_documentation_avail}" />
		<exit code="1" unless="${tmp_documentation_avail}" />

		<!-- move documentation -->
		<mkdir directory="${INSTALL_DIR}${path_separator}docs" />
		<copy dir="${INSTALL_DIR}${path_separator}temporary_documentation${path_separator}Help" to_directory="${INSTALL_DIR}${path_separator}docs">
			<fileset include="@(**/*)" />
		</copy>

		<!-- cleanup temporary files -->
		<exec executable="rmdir /q/s ${INSTALL_DIR}${path_separator}temporary_documentation" if="${is_windows}" accept_errors="true" />
		<exec executable="rm -rf ${INSTALL_DIR}${path_separator}temporary_documentation" unless="${is_windows}" accept_errors="true" />
		<exec executable="rm ${EIFFEL_SRC}${path_separator}tools${path_separator}doc_builder${path_separator}output_log.txt" if="${is_windows}" accept_errors="true" />
		<exec executable="rm ${EIFFEL_SRC}${path_separator}tools${path_separator}doc_builder${path_separator}output_log.txt" unless="${is_windows}" accept_errors="true" />

		<unset name="tmp_docbuilder_avail" />
		<unset name="tmp_documentation_avail" />

		<set name="logmsg" value="Finished generating documentation." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>

	<target name="build_wizards" depend="init_delivery">
		<set name="logmsg" value="Building wizards into ${INSTALL_DIR}" />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="finalize_vision2_wizard" reuse_variables="true" fork="false" />
		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="delivery_wizard" reuse_variables="true" fork="false" />

		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="finalize_wizard_wizard" reuse_variables="true" fork="false" />
		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="delivery_wizard" reuse_variables="true" fork="false" />

		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="finalize_precompile_wizard" reuse_variables="true" fork="false" />
		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="delivery_wizard" reuse_variables="true" fork="false" />

		<geant target="build_wizards_unix" reuse_variables="true" fork="false" />
		<geant target="build_wizards_windows" reuse_variables="true" fork="false" />

		<set name="logmsg" value="Finished building wizards." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>
	<target name="build_wizards_unix" depend="init_delivery" unless="${is_windows}">
		<exec executable="rm -rf ${INSTALL_DIR}${path_separator}studio${path_separator}wizards${path_separator}new_projects${path_separator}wel*" />
		<exec executable="rm -rf ${INSTALL_DIR}${path_separator}studio${path_separator}wizards${path_separator}new_projects${path_separator}dotnet*" />
	</target>
	<target name="build_wizards_windows" depend="init_delivery" if="${is_windows}">
		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="finalize_wel_wizard" reuse_variables="true" fork="false" />
		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="delivery_wizard" reuse_variables="true" fork="false" />

		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="finalize_dotnet_wizard" reuse_variables="true" fork="false" />
		<geant file="${misc_dir}${path_separator}compile_wizards.eant" target="delivery_wizard" reuse_variables="true" fork="false" />
	</target>

	<target name="build_vision2demo" depend="init_delivery">
		<set name="logmsg" value="Building vision2 demo..." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />

		<set name="vision2demo_dir" value="${INSTALL_DIR}${path_separator}vision2_demo" />
		<set name="vision2demo_source_dir" value="${EIFFEL_SRC}${path_separator}examples${path_separator}vision2${path_separator}widget_test${path_separator}interface_temp" />
		<set name="build_dir" value="${EIFFEL_SRC}${path_separator}build" />

		<mkdir directory="${vision2demo_source_dir}" />

		<copy file="gb_constants.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}Constants" />
		<copy file="gb_general_utilities.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}utilities" />
		<copy file="gb_widget_utilities.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}utilities" />
		<copy file="ordered_string_handler.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}utilities" />
		<copy file="gb_supported_events.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}main" />
		<copy file="object_default_state_checker.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}utilities" />
		<copy file="gb_color_stone.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}utilities" />
		<copy file="gb_fixed_positioner.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}dialogs${path_separator}gb_fixed_positioner" />
		<copy file="gb_fixed_positioner_imp.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}dialogs${path_separator}gb_fixed_positioner" />
		<copy file="gb_table_positioner.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}dialogs${path_separator}gb_table_positioner" />
		<copy file="gb_table_positioner_imp.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}dialogs${path_separator}gb_table_positioner" />
		<copy file="gb_ev_pixmap_handler.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface" />
		<copy file="gb_ev_box_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}containers" />
		<copy file="gb_ev_container_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}containers" />
		<copy file="gb_ev_fixed_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}containers" />
		<copy file="gb_ev_frame_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}containers" />
		<copy file="gb_ev_notebook_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}containers" />
		<copy file="gb_ev_table_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}containers" />
		<copy file="gb_ev_viewport_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}containers" />
		<copy file="gb_ev_gauge_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}primitives" />
		<copy file="gb_ev_text_component_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}widgets${path_separator}primitives" />
		<copy file="gb_ev_deselectable_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}properties" />
		<copy file="gb_ev_sensitive_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}properties" />
		<copy file="gb_ev_text_alignable_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}properties" />
		<copy file="gb_ev_textable_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}properties" />
		<copy file="gb_ev_tooltipable_editor_constructor.e" to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface${path_separator}properties" />

		<copy to_directory="${vision2demo_source_dir}" dir="${build_dir}${path_separator}interface">
			<fileset include="@(events/**/*)"/>
		</copy>
		<copy to_directory="${vision2demo_dir}" dir="${INSTALL_DIR}${path_separator}esbuilder">
			<fileset include="@(bitmaps/**/*)"/>
		</copy>

		<exec executable="ec -local -config ${EIFFEL_SRC}${path_separator}examples${path_separator}vision2${path_separator}widget_test${path_separator}vision2.ecf -project_path ${cwd}" dir="${vision2demo_dir}" accept_errors="true" />
		<exec executable="ec -local -config ${EIFFEL_SRC}${path_separator}examples${path_separator}vision2${path_separator}widget_test${path_separator}vision2.ecf -project_path ${cwd} -loop &lt; ${EIFFEL_SRC}${path_separator}examples${path_separator}vision2${path_separator}widget_test${path_separator}flatshort_instructions.txt" dir="${vision2demo_dir}" accept_errors="true" />

                <set name="system" value="vision2_demo"/>
                <set name="system_target" value="vision2_demo" />
                <set name="system_ecf" value="${EIFFEL_SRC}${path_separator}examples${path_separator}vision2${path_separator}widget_test${path_separator}vision2_demo.ecf" />
                <set name="system_dir" value="${cwd}" />
                <geant file="${EIFFEL_SRC}${path_separator}scripts${path_separator}misc${path_separator}ise_eiffel.eant" target="finalize" reuse_variables="true" fork="false" />

		<mkdir directory="${INSTALL_DIR}${path_separator}vision2_demo${path_separator}spec" />
		<mkdir directory="${INSTALL_DIR}${path_separator}vision2_demo${path_separator}spec${path_separator}${ISE_PLATFORM}" />
		<mkdir directory="${INSTALL_DIR}${path_separator}vision2_demo${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin" />
		<copy file="${system_dir}${path_separator}EIFGENs${path_separator}vision2_demo${path_separator}F_code${path_separator}vision2_demo${exe}" to_file="${INSTALL_DIR}${path_separator}vision2_demo${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin${path_separator}vision2_demo${exe}" if="${return_code}=0" />

		<!-- Unix: make executable -->
		<exec executable="chmod a+x ${INSTALL_DIR}${path_separator}vision2_demo${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin${path_separator}vision2_demo${exe}" unless="${is_windows}" accept_errors="true" />

		<exec executable="rmdir /q/s ${vision2demo_source_dir}" if="${is_windows}" accept_errors="true" />
		<exec executable="rm -rf ${vision2demo_source_dir}" unless="${is_windows}" accept_errors="true" />
		<exec executable="rmdir /q/s ${vision2demo_dir}${path_separator}templates" if="${is_windows}" accept_errors="true" />
		<exec executable="rm -rf ${vision2demo_dir}${path_separator}templates" unless="${is_windows}" accept_errors="true" />

		<unset name="build_dir" />
		<unset name="vision2demo_dir" />
		<unset name="vision2demo_source_dir" />

		<set name="logmsg" value="Finished building vision2 demo." />
		<geant target="logger" arguments="${build_es_logfile},${logmsg}" />
		<unset name="logmsg" />
	</target>
</project>
