<?xml version="1.0"?>

<project name="compile_library" default="help">

	<description>
		description: "Clib library compilation"
		author: "Jocelyn Fiat and others"
	</description>

	<inherit>
		<parent location="${EIFFEL_SRC}/scripts/misc/_common_.eant">
			<redefine target="help"/>
		</parent>
	</inherit>
	
	<target name="help">
		<echo message="usage:"/>
		<echo message=" geant compile_library" />
		<echo message=" geant clean_library" />
	</target>	

	<!--
	**************************************************************************************
	***  C code preparation (compilation ...)                   **************************
	**************************************************************************************
	-->

	<target name="compile_all" depend="init">
		<geant target="compile_c_library" />
		<geant target="compile_library" />
		<geant target="compile_eiffel_framework" />
		<geant target="process_gobo" />
	</target>

	<target name="clean_library" depend="init">
		<exec executable="rmdir /q/s ${EIFFEL_SRC}${path_separator}library${path_separator}net${path_separator}spec" if="${is_windows}" accept_errors="true" />
                <exec executable="rm -rf ${EIFFEL_SRC}${path_separator}library${path_separator}net${path_separator}spec" unless="${is_windows}" accept_errors="true" />
		<exec executable="rmdir /q/s ${EIFFEL_SRC}${path_separator}library${path_separator}vision2${path_separator}spec${path_separator}linux-x86" if="${is_windows}" accept_errors="true" />
                <exec executable="rm -rf ${EIFFEL_SRC}${path_separator}library${path_separator}vision2${path_separator}spec${path_separator}linux-x86" unless="${is_windows}" accept_errors="true" />

		<!-- Remove generated gobo.ecf file -->
		<exec executable="rm ${EIFFEL_SRC}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf" if="${is_windows}" accept_errors="true" />
                <exec executable="rm ${EIFFEL_SRC}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf" unless="${is_windows}" accept_errors="true" />
	</target>

	<!-- C_library -->
	<target name="compile_c_library" depend="init" if="${is_windows}">
		<set name="old_ISE_EIFFEL" value="${ISE_EIFFEL}" />
		<setenv name="ISE_EIFFEL" value="${ISE_LIBRARY}" />

		<echo message="Compiling zlib" />
		<exec executable="make_${ISE_C_COMPILER}.bat" dir="${ISE_LIBRARY}/C_library/zlib" accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compiling libpng" />
		<exec executable="make_${ISE_C_COMPILER}.bat" dir="${ISE_LIBRARY}/C_library/libpng" accept_errors="true" exit_code_variable="return_code" />

		<setenv name="ISE_EIFFEL" value="${old_ISE_EIFFEL}" />
		<unset name="old_ISE_EIFFEL" />
	</target>

	<!-- library -->
	<target name="compile_library" depend="init">
		<echo message="Compile net clib" />
		<exec executable="make_${ISE_C_COMPILER}.bat" dir="${ISE_LIBRARY}/library/net/Clib" if="${is_windows}" 	accept_errors="true" exit_code_variable="return_code" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/library/net/Clib" unless="${is_windows}" accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile vision2 clib" />
		<exec executable="make_${ISE_C_COMPILER}.bat" dir="${ISE_LIBRARY}/library/vision2/Clib" if="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/library/vision2/Clib" unless="${is_windows}" accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile wel clib" />
		<exec executable="make_${ISE_C_COMPILER}.bat" dir="${ISE_LIBRARY}/library/wel/clib" if="${is_windows}" accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile vision2/gtk clib" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/library/vision2/implementation/gtk/Clib" unless="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
	</target>

	<target name="process_gobo" depend="init">
		<echo message="Process Gobo" />

		<!-- take gobo from $GOBO -->
		<available resource="${GOBO}${path_separator}library" variable="gobo_available" true_value="native" />
		<echo message="GOBO is already installed ${GOBO}${path_separator}library" if="${gobo_available}=native" />
		<replace file="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf.in" to_file="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf" token="##GOBO##" replace="##DOLLAR##{GOBO}${path_separator}" flags="g" if="${gobo_available}=native" />
		
		<!-- take gobo from $ISE_LIBRARY -->
		<available resource="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}library" variable="gobo_available" true_value="lib" if="${gobo_available}=false" />
		<echo message="GOBO is already installed ${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}library" if="${gobo_available}=lib" />
		<replace file="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf.in" to_file="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf" token="##GOBO##" replace="##DOLLAR##{ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}" flags="g" if="${gobo_available}=lib" />
		
		<!-- take gobo from $ISE_EIFFEL -->
		<available resource="${ISE_EIFFEL}${path_separator}library${path_separator}gobo${path_separator}library" variable="gobo_available" true_value="ise" if="${gobo_available}=false" />
		<echo message="GOBO is already installed ${ISE_EIFFEL}${path_separator}library${path_separator}gobo${path_separator}library" if="${gobo_available}=ise" />
		<replace file="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf.in" to_file="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf" token="##GOBO##" replace="##DOLLAR##{ISE_EIFFEL}${path_separator}library${path_separator}gobo${path_separator}" flags="g" if="${gobo_available}=ise" />

		<!-- in every case: replace the dollar sign -->
		<replace file="${ISE_LIBRARY}${path_separator}library${path_separator}gobo${path_separator}gobo.ecf" token="##DOLLAR##" replace="$" flags="g" />
		
		<unset name="gobo_available" />
	</target>
	
	<target name="compile_eiffel_framework" depend="init" if="${is_windows}">
		<echo message="Compile Eiffel framework externals lib" />

		<echo message="Compile dotnet IL runtime" />
		<exec executable="nmake /f Makefile" dir="${EIFFEL_SRC}\Eiffel\eiffel\com_il_generation\Core\run-time" accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile cli_writer" />
		<exec executable="nmake /f Makefile" dir="${EIFFEL_SRC}\framework\cli_writer\Clib" accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile cli_debugger" />
		<exec executable="nmake /f Makefile" dir="${EIFFEL_SRC}\framework\cli_debugger\Clib" accept_errors="true" exit_code_variable="return_code" />
	</target>
	
</project>
