note
	description: "Class to consider some postconditions from simple functions as class invariants"
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	EPA_SIMPLE_FUNCTION_POSTCONDITION_GENERATOR

inherit
	SHARED_TYPES

	SHARED_SERVER

	REFACTORING_HELPER

	AST_ITERATOR
		redefine
			process_object_test_as,
			process_static_access_as,
			process_nested_as
		end

	INTERNAL_COMPILER_STRING_EXPORTER

	EPA_UTILITY

feature -- Access

	last_postconditions: LINKED_LIST [EPA_EXPRESSION]
			-- Postcondition generated by the last `generate'

feature -- Status report

	should_generate_for_features_with_argument: BOOLEAN
			-- Should the generation be enabled for features with argument?
			-- Default: False

	should_generate_for_features_with_precondition: BOOLEAN
			-- Should the generation be enabled for features with precondition?
			-- Default: False

feature -- Setting

	set_should_generate_for_features_with_argument (b: BOOLEAN)
			-- Set `should_generate_for_features_with_argument' with `b'.
		do
			should_generate_for_features_with_argument := b
		ensure
			should_generate_for_features_with_argument_set: should_generate_for_features_with_argument = b
		end

	set_should_generate_for_features_with_precondition (b: BOOLEAN)
			-- Set `should_generate_for_features_with_precondition' with `b'.
		do
			should_generate_for_features_with_precondition := b
		ensure
			should_generate_for_features_with_precondition_set: should_generate_for_features_with_precondition = b
		end

feature -- Generation

	generate (a_class: CLASS_C; a_feature: FEATURE_I)
			-- Generate postcondition for `a_feature'.
			-- Store result in `last_postconditions'.
		local
			l_contract_extractor: EPA_CONTRACT_EXTRACTOR
			l_done: BOOLEAN
			l_text: STRING
			l_expr: EPA_AST_EXPRESSION
		do
			create last_postconditions.make

				-- Only generate postcondition for functions
			l_done := a_feature.type.is_void

				-- Only generate postcondition for argumentless functions.
			if not l_done then
				fixme ("Only generate postconditions for argumentless functions. 17.11.2009 Jason")
				if not should_generate_for_features_with_argument then
					l_done := a_feature.argument_count /= 0
				end
			end

				-- Only generate postcondition for function
			if not l_done then
				l_done := a_feature.is_attribute
			end

				-- Only generate postcondition for functions without preconditions.
			if not l_done then
				if not should_generate_for_features_with_argument then
					l_done := a_feature.has_precondition
				end
			end

				-- Only generate postcondition if `a_feature' does not have any postcondition yet.
--			if not l_done then
--				create l_contract_extractor
--				l_done := not l_contract_extractor.postcondition_of_feature (a_feature, a_class).is_empty
--			end

			if not l_done then
				if attached {DO_AS} body_ast_from_feature (a_feature) as l_do then
					if attached l_do.compound then
						if l_do.compound.count = 1 then
							if attached {ASSIGN_AS} l_do.compound.first as l_assign then
								if attached {RESULT_AS} l_assign.target as l_result then
									if not text_from_ast (l_assign.source).has (',') then
										is_suitable := True
										l_assign.source.process (Current)
										if is_suitable then
											l_text := l_assign.source.original_text (match_list_server.item (a_feature.written_class.class_id))
											l_text.prepend ("Result = (")
											l_text.append (once ")")
											create l_expr.make_with_text (a_class, a_feature, l_text, a_class)
											if l_expr.type /= Void then
												last_postconditions.extend (l_expr)
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end

feature{NONE} -- Implementation

	is_suitable: BOOLEAN
			-- Is Current process AST suitable for a postcondition?

feature{NONE} -- Process

	process_object_test_as (l_as: OBJECT_TEST_AS)
		do
			is_suitable := False
		end

	process_static_access_as (l_as: STATIC_ACCESS_AS)
		do
			is_suitable := False
		end

	process_nested_as (l_as: NESTED_AS)
		do
			is_suitable := False
			fixme ("Does not support qualified call for the moment. 17.11.2009 Jason")
		end

note
	copyright: "Copyright (c) 1984-2009, Eiffel Software"
	license: "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			Eiffel Software
			5949 Hollister Ave., Goleta, CA 93117 USA
			Telephone 805-685-1006, Fax 805-685-6869
			Website http://www.eiffel.com
			Customer support http://support.eiffel.com
		]"
end
